// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
file := import("@platforma-sdk/workflow-tengo:file")
times := import("times")
json := import("json")
rand := import("rand")
text := import("text")

mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:main")

toCamelCase := import(":formatText")

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	if is_undefined(args.vFastaFile) && is_undefined(args.vSpecies) {
		ll.panic("expected to have either `fastaFile` or `built in`; provided no any")
	}

	if is_undefined(args.jFastaFile) && is_undefined(args.jSpecies) {
	 	ll.panic("expected to have either `fastaFile` or `built in`; provided no any")
	}

	outputs := {}

	species := args.species
	cmdSpecies := toCamelCase.toCamelCase(species) + "_custom"
	chain := args.chain

	libraryBuilderCmdBuilder := undefined

	taxonId := string(rand.intn(9000) + 1000)
	libraryBuilderCmdBuilder = exec.builder().
		software(mixcrSw).
		secret("MI_LICENSE", "MI_LICENSE").
	 	arg("buildLibrary").
	 	arg("--species").arg(cmdSpecies).
	 	arg("--chain").arg(chain).
	 	arg("--taxon-id").arg(taxonId)
	if !is_undefined(args.vFastaFile) {
	 	vImport := file.importFile(args.vFastaFile)
		outputs.vImportHandle = vImport.handle
	 	libraryBuilderCmdBuilder.arg("--v-gene-feature").arg("VRegion").
	 	arg("--v-genes-from-fasta").arg("v.fasta").
	 	addFile("v.fasta", vImport.file)
	} else {
	 	libraryBuilderCmdBuilder.arg("--v-genes-from-species").arg(args.vSpecies)
	}

	if !is_undefined(args.jFastaFile) {
	 	jImport := file.importFile(args.jFastaFile)
		outputs.jImportHandle = jImport.handle
	 	libraryBuilderCmdBuilder.arg("--j-genes-from-fasta").arg("j.fasta").
	 		addFile("j.fasta", jImport.file)
	} else {
	 	libraryBuilderCmdBuilder.arg("--j-genes-from-species").arg(args.jSpecies)
	}

	if !is_undefined(args.dFastaFile) {
	 	dImport := file.importFile(args.dFastaFile)
		outputs.dImportHandle = dImport.handle
	 	libraryBuilderCmdBuilder.arg("--d-genes-from-fasta").arg("d.fasta").
	 	addFile("d.fasta", dImport.file)
	} else if !is_undefined(args.dSpecies) {
	 	libraryBuilderCmdBuilder.arg("--d-genes-from-species").arg(args.dSpecies)
	}

	if !is_undefined(args.cFastaFile) {
		cImport := file.importFile(args.cFastaFile)
		outputs.cImportHandle = cImport.handle
	 	libraryBuilderCmdBuilder.arg("--c-genes-from-fasta").arg("c.fasta").
	 	addFile("c.fasta", cImport.file)
	} else if !is_undefined(args.cSpecies) {
	 	libraryBuilderCmdBuilder.arg("--c-genes-from-species").arg(args.cSpecies)
	}

	libraryBuilderCmdBuilder.arg("library.json").
		saveFile("library.json").
		printErrStreamToStdout()
	libraryBuilderCmd := libraryBuilderCmdBuilder.run()

	debugOutput := libraryBuilderCmd.getStdoutStream()
	library := libraryBuilderCmd.getFile("library.json")

	outputs.debugOutput = debugOutput

	exports := {
		library : {
			data: library,
			spec: {
				kind: "File",
				name: "pl7.app/vdj/library",
				domain: {
					"pl7.app/vdj/libraryId": blockId
				},
				annotations: {
					"pl7.app/species": cmdSpecies,
					"pl7.app/vdj/chain": chain,
					"pl7.app/vdj/isLibrary": "true",
					"pl7.app/vdj/libraryFormat": "repseqio.json",
					"pl7.app/label": text.split(species, "_custom")[0] + " " + chain + " library"
				}
			}
	 	}
	}

	return {
		outputs: outputs,
		exports: exports
	}
})

